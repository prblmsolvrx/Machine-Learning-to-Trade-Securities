# Importing the required libraries
from datasets import load_dataset  # To load datasets from the huggingface dataset library
import pandas as pd  # For data manipulation and analysis
from sklearn.preprocessing import StandardScaler  # For standardizing features
from sklearn.model_selection import cross_val_score  # For performing cross-validation
from sklearn.ensemble import GradientBoostingRegressor  # For the Gradient Boosting Regression model
import matplotlib.pyplot as plt  # For plotting data

# Load the Tesla historical prices dataset from the Hugging Face library
tesla = load_dataset('codesignal/tsla-historic-prices')

# Convert the loaded dataset into a pandas DataFrame for easier manipulation
tesla_df = pd.DataFrame(tesla['train'])

# Convert the 'Date' column from string format to a datetime object for easier handling
tesla_df['Date'] = pd.to_datetime(tesla_df['Date'])

# Feature Engineering: Creating additional features for the model

# Create a 'Target' column representing the difference between the next day's adjusted closing price 
# and the current day's adjusted closing price
tesla_df['Target'] = tesla_df['Adj Close'].shift(-1) - tesla_df['Adj Close']

# Create a 5-day Simple Moving Average (SMA_5) column based on the adjusted closing prices
tesla_df['SMA_5'] = tesla_df['Adj Close'].rolling(window=5).mean()

# Create a 10-day Simple Moving Average (SMA_10) column based on the adjusted closing prices
tesla_df['SMA_10'] = tesla_df['Adj Close'].rolling(window=10).mean()

# Create a 5-day Exponential Moving Average (EMA_5) column using the adjusted closing prices
tesla_df['EMA_5'] = tesla_df['Adj Close'].ewm(span=5, adjust=False).mean()

# Create a 10-day Exponential Moving Average (EMA_10) column using the adjusted closing prices
tesla_df['EMA_10'] = tesla_df['Adj Close'].ewm(span=10, adjust=False).mean()

# Drop any rows containing NaN values that were generated by the rolling or exponential moving averages
tesla_df.dropna(inplace=True)

# Select features and target variables for model training
# Features include Open, High, Low, Close, Volume, and the moving averages created earlier
features = tesla_df[['Open', 'High', 'Low', 'Close', 'Volume', 'SMA_5', 'SMA_10', 'EMA_5', 'EMA_10']].values

# Target variable is the 'Target' column, representing the next day's price change
target = tesla_df['Target'].values

# Standardize the feature variables to have a mean of 0 and standard deviation of 1
scaler = StandardScaler()  # Instantiate the StandardScaler
features_scaled = scaler.fit_transform(features)  # Fit and transform the features

# Instantiate the Gradient Boosting Regressor model with specified hyperparameters
model = GradientBoostingRegressor(
    n_estimators=200,  # Number of boosting stages to be run
    learning_rate=0.1,  # Learning rate shrinks the contribution of each tree
    max_depth=3,  # Maximum depth of the individual regression estimators
    random_state=42  # Ensure reproducibility of results
)

# Perform 10-fold cross-validation using the standardized features and target variable
scores = cross_val_score(model, features_scaled, target, cv=10)

# Calculate and print the mean cross-validation score
mean_score = scores.mean()
print("Mean cross-validation score: ", mean_score)

# Fit the Gradient Boosting model to the entire standardized feature set and target variable
model.fit(features_scaled, target)

# Make predictions using the fitted model
predictions = model.predict(features_scaled)

# Plotting the actual vs predicted values to visualize the model's performance
plt.figure(figsize=(10, 6))  # Create a figure with the specified size
plt.scatter(range(len(target)), target, label='Actual', alpha=0.7)  # Plot actual values
plt.scatter(range(len(target)), predictions, label='Predicted', alpha=0.7)  # Plot predicted values
plt.title('Actual vs Predicted Values with Cross-Validation')  # Set plot title
plt.xlabel('Sample Index')  # Label the x-axis
plt.ylabel('Value')  # Label the y-axis
plt.legend()  # Show the legend to differentiate between actual and predicted values
plt.show()  # Display the plot
